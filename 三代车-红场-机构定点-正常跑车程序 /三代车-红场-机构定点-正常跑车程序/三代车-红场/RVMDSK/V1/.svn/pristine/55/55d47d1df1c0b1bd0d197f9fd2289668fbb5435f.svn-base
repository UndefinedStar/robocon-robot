#include "pid.h"

float Ek1=0,Ek2=0,Ek3=0;
float P=0.16,I=0,D=0.1;
int PulseDirection=0,PulseCutDown=0;
int stop_angle_flag = 0;
int hd0to1_flag = 0;
float stop_angle = 0;
float Angle=0,kp=0;
s16 stop4_flag = 0;
float message2 = 0;
float BigCarWaitingDistance = 0;
u8  HandFanleafFlag = 0;
int sc_test = 0;
u8 back_flag = 0;
float AngleLast = 0;
u8 time_mid_flag = 0;
int speed_back = 0;
float translation_angle = 4.5; 
void CameraPid(void)
{
/* 分段调整PID参数，默认值为上坡参数 */
/* 计算角度信息,正右负左*/
Ek1=message;
	
// PD调节
if(sp_flag==1)
{
	P =0.36;
	if(right_angle_flag==1)
		P = 0.5;
}
else if(hd_flag==1)
{
	P = 0.25;   //0.1\0.25
	if(hd_stage_flag==5)
	{
		P = 0.3;  //0.35
		if(speed_hd5<=8)
			P = 0.31;
		else if(speed_hd5>8&&speed_hd5<11)
			P = 0.32;
		else
			P = 0.33;
	}
	else if(hd_stage_flag<=1)
		P = 0.32; 
}
else if(xp_flag==1)
{
	P = 0.4;
	if(img_stop_flag==3)
	{
		P=0.28;
	}
}
	if(hd_flag==1)
		D = 0 ;
	else if(xp_flag==1)
		D = 0.1;
	if(sp_flag==1)
		D = 0.6;
	if((left_angle_flag==1||right_angle_flag==1))
		D=0;

	// 打角信息计算
	Angle=P*Ek1+I*Ek3+D*(Ek1-Ek3)+translation_angle;

	/* 角度调整 */
	
	// 上坡部分，直角前车体向外侧平移,这个参数很重要
	if(sp_flag==1&&HuorDistance>ZjClearDistance)
		Angle-=1.5;
	
	// 河道部分，调整过直线时车体尽可能在两侧岛屿中间
	if(hd_flag==1&&hd_stage_flag>=4)
		Angle+=1.2;//+0.36 
	
	// 下坡部分
	// 发电区，重启，直接进入下坡最后一个阶段
	if(hand_restart==1)
	{
		img_stop_flag = 5;
		stop_angle = translation_angle;
		stop_time = 0; 
		hand_restart = 2;
	}

	// 交接打定角
	if(img_stop_flag>=4)
	{
		if((nu<38&&nu>30&&fabs(race)<=0.19&&stop_angle==0&&whitelost_left==0))
		{
			stop_angle = Angle*0.3;//0.6*
			img_stop_flag=5;
		}
		if(stop_angle!=0)
			Angle = stop_angle;    //下坡定角平移//+3
	}

	// 角度限幅
	if(fabs(Angle)>30)
		Angle = 30*Angle/fabs(Angle);				// 限定打角范围

	Ek3 = Ek2;
	Ek2=Ek1;
	
	// 计算脉冲，脉冲为实际发送值
	PulseDirection=(int)(((double)Angle/90+1.5)*1000);	
	PulseCutDown = 1950;

	/* 刹车策略 */
	
	// 直角部分刹车
	if(late_cut_down==1)
	{
		if(speed_now<9)
			zj_sc_count = 5;		// 设定每次刹车的作用时间
		else
			zj_sc_count = 8;
	}
	else
		zj_sc_count = 0;
	if(zj_sc_count>0)
	{
		PulseCutDown = 1300;
	}
	
	// 河道部分刹车
	// 出河道刹车，防止速度过快掉出河道
	if((speed_now>=12&&img_stop_flag<2&&xp_flag==1)||(speed_now>=11&&hd_stage_flag>=4&hd_flag==1))
		PulseCutDown = 1300;
	
	// 下坡部分刹车
	// 第二个弯道进入弯道时限速，保证刹车漂移不至于太明显
	if(xp_flag==1&&speed_now>5&&img_stop_flag==2&&speed_stop2>0)
		PulseCutDown = 1300;
	// 刹车，等待交接，超声波或者延时触发
	if(HuorDistance-speed_stop2>XpScDistance&&speed_stop2>0&&hand_restart==0)	//
	{
		if(speed_now>8&&HuorDistance-speed_stop2>XpScDistance&&HuorDistance-speed_stop2<=XpScDistance+10)
			PulseCutDown= 1300;
		if(HuorDistance-speed_stop2>XpScDistance+10)
			PulseCutDown= 1300;
		
		if(speed_now==0&&BigCarWaitingDistance==0&&stop_time>5)
		{
				BigCarWaitingDistance = UltrosonicDistance;
		}
		if(HandFanleafFlag==0)
		{
			if(BigCarWaitingDistance-UltrosonicDistance>20)
			{
				HandFanleafFlag=1;
				beep_count = 1;
			}
			else if(fabs(BigCarWaitingDistance-UltrosonicDistance)<5)
				BigCarWaitingDistance = UltrosonicDistance;
		}
		if(stop_time>15&&HandFanleafFlag==0)
		{
			HandFanleafFlag=1;
			beep_count = 1;
		}
		if(HandFanleafFlag==1)//||stop_time>15
			PulseCutDown= 1950;
	}
	

	// 重启刹车
	if(hand_restart==2)
	{
		PulseCutDown= 1300;
		
		if(speed_now==0&&UltrosonicDistance>120&&stop_time>20)
		{
				time_mid_flag=1;
		}
		if(stop_time>40)
			time_mid_flag = 2;
		if(HandFanleafFlag==0)
		{
			if(UltrosonicDistance<60&&time_mid_flag==2)
			{
				HandFanleafFlag=1;
				beep_count = 1;
				stop_time = 0;
			}
		}
//		if(stop_time>150&&HandFanleafFlag==0)
//		{
//			HandFanleafFlag=1;
//			beep_count = 1;
//		}
		if(HandFanleafFlag==1&&stop_time>10)//||stop_time>15
			PulseCutDown= 1950;
	}
	
	// 交接之后防止小车被吹出风力发电区刹车
	if(DirectionFlag==1&&img_stop_flag>=4&&speed_back==0&&HandFanleafFlag==1)
		speed_back = HuorDistance;
	if(HuorDistance-speed_back>3&&speed_back>0&&speed_now>=1&&back_flag==0&&DirectionFlag==1)
		back_flag = 1;
	if(back_flag==1)
		PulseCutDown = 1300;
	
	// 发送信息
	SendPulse(PulseCutDown,PulseDirection);
	SendPulseBeep(beep_count);
}
